package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AuditHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditHistoryAllPropertiesEquals(AuditHistory expected, AuditHistory actual) {
        assertAuditHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertAuditHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditHistoryAllUpdatablePropertiesEquals(AuditHistory expected, AuditHistory actual) {
        assertAuditHistoryUpdatableFieldsEquals(expected, actual);
        assertAuditHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditHistoryAutoGeneratedPropertiesEquals(AuditHistory expected, AuditHistory actual) {
        assertThat(actual)
            .as("Verify AuditHistory auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditHistoryUpdatableFieldsEquals(AuditHistory expected, AuditHistory actual) {
        assertThat(actual)
            .as("Verify AuditHistory relevant properties")
            .satisfies(a -> assertThat(a.getEntityName()).as("check entityName").isEqualTo(expected.getEntityName()))
            .satisfies(a -> assertThat(a.getEntityId()).as("check entityId").isEqualTo(expected.getEntityId()))
            .satisfies(a -> assertThat(a.getAction()).as("check action").isEqualTo(expected.getAction()))
            .satisfies(a -> assertThat(a.getOldValue()).as("check oldValue").isEqualTo(expected.getOldValue()))
            .satisfies(a -> assertThat(a.getNewValue()).as("check newValue").isEqualTo(expected.getNewValue()))
            .satisfies(a -> assertThat(a.getPerformedBy()).as("check performedBy").isEqualTo(expected.getPerformedBy()))
            .satisfies(a -> assertThat(a.getPerformedAt()).as("check performedAt").isEqualTo(expected.getPerformedAt()))
            .satisfies(a -> assertThat(a.getIpAddress()).as("check ipAddress").isEqualTo(expected.getIpAddress()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditHistoryUpdatableRelationshipsEquals(AuditHistory expected, AuditHistory actual) {
        // empty method
    }
}
