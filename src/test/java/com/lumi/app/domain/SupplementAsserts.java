package com.lumi.app.domain;

import static com.lumi.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SupplementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplementAllPropertiesEquals(Supplement expected, Supplement actual) {
        assertSupplementAutoGeneratedPropertiesEquals(expected, actual);
        assertSupplementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplementAllUpdatablePropertiesEquals(Supplement expected, Supplement actual) {
        assertSupplementUpdatableFieldsEquals(expected, actual);
        assertSupplementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplementAutoGeneratedPropertiesEquals(Supplement expected, Supplement actual) {
        assertThat(actual)
            .as("Verify Supplement auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplementUpdatableFieldsEquals(Supplement expected, Supplement actual) {
        assertThat(actual)
            .as("Verify Supplement relevant properties")
            .satisfies(a ->
                assertThat(a.getSupplyPrice())
                    .as("check supplyPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getSupplyPrice())
            )
            .satisfies(a -> assertThat(a.getCurrency()).as("check currency").isEqualTo(expected.getCurrency()))
            .satisfies(a -> assertThat(a.getLeadTimeDays()).as("check leadTimeDays").isEqualTo(expected.getLeadTimeDays()))
            .satisfies(a -> assertThat(a.getMinOrderQty()).as("check minOrderQty").isEqualTo(expected.getMinOrderQty()))
            .satisfies(a -> assertThat(a.getIsPreferred()).as("check isPreferred").isEqualTo(expected.getIsPreferred()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplementUpdatableRelationshipsEquals(Supplement expected, Supplement actual) {
        assertThat(actual)
            .as("Verify Supplement relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getSupplier()).as("check supplier").isEqualTo(expected.getSupplier()));
    }
}
