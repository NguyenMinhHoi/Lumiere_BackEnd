package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StockMovementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockMovementAllPropertiesEquals(StockMovement expected, StockMovement actual) {
        assertStockMovementAutoGeneratedPropertiesEquals(expected, actual);
        assertStockMovementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockMovementAllUpdatablePropertiesEquals(StockMovement expected, StockMovement actual) {
        assertStockMovementUpdatableFieldsEquals(expected, actual);
        assertStockMovementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockMovementAutoGeneratedPropertiesEquals(StockMovement expected, StockMovement actual) {
        assertThat(actual)
            .as("Verify StockMovement auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockMovementUpdatableFieldsEquals(StockMovement expected, StockMovement actual) {
        assertThat(actual)
            .as("Verify StockMovement relevant properties")
            .satisfies(a -> assertThat(a.getProductVariantId()).as("check productVariantId").isEqualTo(expected.getProductVariantId()))
            .satisfies(a -> assertThat(a.getWarehouseId()).as("check warehouseId").isEqualTo(expected.getWarehouseId()))
            .satisfies(a -> assertThat(a.getDelta()).as("check delta").isEqualTo(expected.getDelta()))
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getRefOrderId()).as("check refOrderId").isEqualTo(expected.getRefOrderId()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockMovementUpdatableRelationshipsEquals(StockMovement expected, StockMovement actual) {
        // empty method
    }
}
