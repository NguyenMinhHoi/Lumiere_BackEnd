package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClothStockMovementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothStockMovementAllPropertiesEquals(ClothStockMovement expected, ClothStockMovement actual) {
        assertClothStockMovementAutoGeneratedPropertiesEquals(expected, actual);
        assertClothStockMovementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothStockMovementAllUpdatablePropertiesEquals(ClothStockMovement expected, ClothStockMovement actual) {
        assertClothStockMovementUpdatableFieldsEquals(expected, actual);
        assertClothStockMovementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothStockMovementAutoGeneratedPropertiesEquals(ClothStockMovement expected, ClothStockMovement actual) {
        assertThat(actual)
            .as("Verify ClothStockMovement auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothStockMovementUpdatableFieldsEquals(ClothStockMovement expected, ClothStockMovement actual) {
        assertThat(actual)
            .as("Verify ClothStockMovement relevant properties")
            .satisfies(a -> assertThat(a.getClothId()).as("check clothId").isEqualTo(expected.getClothId()))
            .satisfies(a -> assertThat(a.getWarehouseId()).as("check warehouseId").isEqualTo(expected.getWarehouseId()))
            .satisfies(a -> assertThat(a.getDelta()).as("check delta").isEqualTo(expected.getDelta()))
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getRefOrderId()).as("check refOrderId").isEqualTo(expected.getRefOrderId()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothStockMovementUpdatableRelationshipsEquals(ClothStockMovement expected, ClothStockMovement actual) {
        // empty method
    }
}
