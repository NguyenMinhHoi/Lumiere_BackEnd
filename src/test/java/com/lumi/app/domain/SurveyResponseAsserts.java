package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SurveyResponseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyResponseAllPropertiesEquals(SurveyResponse expected, SurveyResponse actual) {
        assertSurveyResponseAutoGeneratedPropertiesEquals(expected, actual);
        assertSurveyResponseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyResponseAllUpdatablePropertiesEquals(SurveyResponse expected, SurveyResponse actual) {
        assertSurveyResponseUpdatableFieldsEquals(expected, actual);
        assertSurveyResponseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyResponseAutoGeneratedPropertiesEquals(SurveyResponse expected, SurveyResponse actual) {
        assertThat(actual)
            .as("Verify SurveyResponse auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyResponseUpdatableFieldsEquals(SurveyResponse expected, SurveyResponse actual) {
        assertThat(actual)
            .as("Verify SurveyResponse relevant properties")
            .satisfies(a -> assertThat(a.getRespondedAt()).as("check respondedAt").isEqualTo(expected.getRespondedAt()))
            .satisfies(a -> assertThat(a.getScore()).as("check score").isEqualTo(expected.getScore()))
            .satisfies(a -> assertThat(a.getComment()).as("check comment").isEqualTo(expected.getComment()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyResponseUpdatableRelationshipsEquals(SurveyResponse expected, SurveyResponse actual) {
        assertThat(actual)
            .as("Verify SurveyResponse relationships")
            .satisfies(a -> assertThat(a.getSurvey()).as("check survey").isEqualTo(expected.getSurvey()))
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getTicket()).as("check ticket").isEqualTo(expected.getTicket()));
    }
}
