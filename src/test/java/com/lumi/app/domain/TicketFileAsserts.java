package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TicketFileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketFileAllPropertiesEquals(TicketFile expected, TicketFile actual) {
        assertTicketFileAutoGeneratedPropertiesEquals(expected, actual);
        assertTicketFileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketFileAllUpdatablePropertiesEquals(TicketFile expected, TicketFile actual) {
        assertTicketFileUpdatableFieldsEquals(expected, actual);
        assertTicketFileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketFileAutoGeneratedPropertiesEquals(TicketFile expected, TicketFile actual) {
        assertThat(actual)
            .as("Verify TicketFile auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketFileUpdatableFieldsEquals(TicketFile expected, TicketFile actual) {
        assertThat(actual)
            .as("Verify TicketFile relevant properties")
            .satisfies(a -> assertThat(a.getFileName()).as("check fileName").isEqualTo(expected.getFileName()))
            .satisfies(a -> assertThat(a.getOriginalName()).as("check originalName").isEqualTo(expected.getOriginalName()))
            .satisfies(a -> assertThat(a.getContentType()).as("check contentType").isEqualTo(expected.getContentType()))
            .satisfies(a -> assertThat(a.getCapacity()).as("check capacity").isEqualTo(expected.getCapacity()))
            .satisfies(a -> assertThat(a.getStorageType()).as("check storageType").isEqualTo(expected.getStorageType()))
            .satisfies(a -> assertThat(a.getPath()).as("check path").isEqualTo(expected.getPath()))
            .satisfies(a -> assertThat(a.getUrl()).as("check url").isEqualTo(expected.getUrl()))
            .satisfies(a -> assertThat(a.getChecksum()).as("check checksum").isEqualTo(expected.getChecksum()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getUploadedAt()).as("check uploadedAt").isEqualTo(expected.getUploadedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketFileUpdatableRelationshipsEquals(TicketFile expected, TicketFile actual) {
        assertThat(actual)
            .as("Verify TicketFile relationships")
            .satisfies(a -> assertThat(a.getTicket()).as("check ticket").isEqualTo(expected.getTicket()));
    }
}
