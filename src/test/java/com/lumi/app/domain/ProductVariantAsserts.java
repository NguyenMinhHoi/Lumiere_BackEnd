package com.lumi.app.domain;

import static com.lumi.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductVariantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantAllPropertiesEquals(ProductVariant expected, ProductVariant actual) {
        assertProductVariantAutoGeneratedPropertiesEquals(expected, actual);
        assertProductVariantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantAllUpdatablePropertiesEquals(ProductVariant expected, ProductVariant actual) {
        assertProductVariantUpdatableFieldsEquals(expected, actual);
        assertProductVariantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantAutoGeneratedPropertiesEquals(ProductVariant expected, ProductVariant actual) {
        assertThat(actual)
            .as("Verify ProductVariant auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantUpdatableFieldsEquals(ProductVariant expected, ProductVariant actual) {
        assertThat(actual)
            .as("Verify ProductVariant relevant properties")
            .satisfies(a -> assertThat(a.getProductId()).as("check productId").isEqualTo(expected.getProductId()))
            .satisfies(a -> assertThat(a.getSku()).as("check sku").isEqualTo(expected.getSku()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a ->
                assertThat(a.getCompareAtPrice())
                    .as("check compareAtPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCompareAtPrice())
            )
            .satisfies(a -> assertThat(a.getCurrency()).as("check currency").isEqualTo(expected.getCurrency()))
            .satisfies(a -> assertThat(a.getStockQuantity()).as("check stockQuantity").isEqualTo(expected.getStockQuantity()))
            .satisfies(a -> assertThat(a.getWeight()).as("check weight").isEqualTo(expected.getWeight()))
            .satisfies(a -> assertThat(a.getLength()).as("check length").isEqualTo(expected.getLength()))
            .satisfies(a -> assertThat(a.getWidth()).as("check width").isEqualTo(expected.getWidth()))
            .satisfies(a -> assertThat(a.getHeight()).as("check height").isEqualTo(expected.getHeight()))
            .satisfies(a -> assertThat(a.getIsDefault()).as("check isDefault").isEqualTo(expected.getIsDefault()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantUpdatableRelationshipsEquals(ProductVariant expected, ProductVariant actual) {
        // empty method
    }
}
