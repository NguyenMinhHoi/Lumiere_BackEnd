package com.lumi.app.domain;

import static com.lumi.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class VoucherAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherAllPropertiesEquals(Voucher expected, Voucher actual) {
        assertVoucherAutoGeneratedPropertiesEquals(expected, actual);
        assertVoucherAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherAllUpdatablePropertiesEquals(Voucher expected, Voucher actual) {
        assertVoucherUpdatableFieldsEquals(expected, actual);
        assertVoucherUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherAutoGeneratedPropertiesEquals(Voucher expected, Voucher actual) {
        assertThat(actual)
            .as("Verify Voucher auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherUpdatableFieldsEquals(Voucher expected, Voucher actual) {
        assertThat(actual)
            .as("Verify Voucher relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getDiscountType()).as("check discountType").isEqualTo(expected.getDiscountType()))
            .satisfies(a ->
                assertThat(a.getDiscountValue())
                    .as("check discountValue")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountValue())
            )
            .satisfies(a ->
                assertThat(a.getMinOrderValue())
                    .as("check minOrderValue")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMinOrderValue())
            )
            .satisfies(a ->
                assertThat(a.getMaxDiscountValue())
                    .as("check maxDiscountValue")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMaxDiscountValue())
            )
            .satisfies(a -> assertThat(a.getUsageLimit()).as("check usageLimit").isEqualTo(expected.getUsageLimit()))
            .satisfies(a -> assertThat(a.getUsedCount()).as("check usedCount").isEqualTo(expected.getUsedCount()))
            .satisfies(a -> assertThat(a.getValidFrom()).as("check validFrom").isEqualTo(expected.getValidFrom()))
            .satisfies(a -> assertThat(a.getValidTo()).as("check validTo").isEqualTo(expected.getValidTo()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherUpdatableRelationshipsEquals(Voucher expected, Voucher actual) {
        // empty method
    }
}
