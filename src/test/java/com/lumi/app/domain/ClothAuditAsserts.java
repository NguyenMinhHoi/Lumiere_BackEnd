package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClothAuditAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothAuditAllPropertiesEquals(ClothAudit expected, ClothAudit actual) {
        assertClothAuditAutoGeneratedPropertiesEquals(expected, actual);
        assertClothAuditAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothAuditAllUpdatablePropertiesEquals(ClothAudit expected, ClothAudit actual) {
        assertClothAuditUpdatableFieldsEquals(expected, actual);
        assertClothAuditUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothAuditAutoGeneratedPropertiesEquals(ClothAudit expected, ClothAudit actual) {
        assertThat(actual)
            .as("Verify ClothAudit auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothAuditUpdatableFieldsEquals(ClothAudit expected, ClothAudit actual) {
        assertThat(actual)
            .as("Verify ClothAudit relevant properties")
            .satisfies(a -> assertThat(a.getClothId()).as("check clothId").isEqualTo(expected.getClothId()))
            .satisfies(a -> assertThat(a.getSupplierId()).as("check supplierId").isEqualTo(expected.getSupplierId()))
            .satisfies(a -> assertThat(a.getProductId()).as("check productId").isEqualTo(expected.getProductId()))
            .satisfies(a -> assertThat(a.getAction()).as("check action").isEqualTo(expected.getAction()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getUnit()).as("check unit").isEqualTo(expected.getUnit()))
            .satisfies(a -> assertThat(a.getSentAt()).as("check sentAt").isEqualTo(expected.getSentAt()))
            .satisfies(a -> assertThat(a.getNote()).as("check note").isEqualTo(expected.getNote()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothAuditUpdatableRelationshipsEquals(ClothAudit expected, ClothAudit actual) {
        // empty method
    }
}
