package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SurveyQuestionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyQuestionAllPropertiesEquals(SurveyQuestion expected, SurveyQuestion actual) {
        assertSurveyQuestionAutoGeneratedPropertiesEquals(expected, actual);
        assertSurveyQuestionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyQuestionAllUpdatablePropertiesEquals(SurveyQuestion expected, SurveyQuestion actual) {
        assertSurveyQuestionUpdatableFieldsEquals(expected, actual);
        assertSurveyQuestionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyQuestionAutoGeneratedPropertiesEquals(SurveyQuestion expected, SurveyQuestion actual) {
        assertThat(actual)
            .as("Verify SurveyQuestion auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyQuestionUpdatableFieldsEquals(SurveyQuestion expected, SurveyQuestion actual) {
        assertThat(actual)
            .as("Verify SurveyQuestion relevant properties")
            .satisfies(a -> assertThat(a.getText()).as("check text").isEqualTo(expected.getText()))
            .satisfies(a -> assertThat(a.getQuestionType()).as("check questionType").isEqualTo(expected.getQuestionType()))
            .satisfies(a -> assertThat(a.getScaleMin()).as("check scaleMin").isEqualTo(expected.getScaleMin()))
            .satisfies(a -> assertThat(a.getScaleMax()).as("check scaleMax").isEqualTo(expected.getScaleMax()))
            .satisfies(a -> assertThat(a.getIsNeed()).as("check isNeed").isEqualTo(expected.getIsNeed()))
            .satisfies(a -> assertThat(a.getOrderNo()).as("check orderNo").isEqualTo(expected.getOrderNo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSurveyQuestionUpdatableRelationshipsEquals(SurveyQuestion expected, SurveyQuestion actual) {
        assertThat(actual)
            .as("Verify SurveyQuestion relationships")
            .satisfies(a -> assertThat(a.getSurvey()).as("check survey").isEqualTo(expected.getSurvey()));
    }
}
