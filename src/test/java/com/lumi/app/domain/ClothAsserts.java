package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClothAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothAllPropertiesEquals(Cloth expected, Cloth actual) {
        assertClothAutoGeneratedPropertiesEquals(expected, actual);
        assertClothAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothAllUpdatablePropertiesEquals(Cloth expected, Cloth actual) {
        assertClothUpdatableFieldsEquals(expected, actual);
        assertClothUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothAutoGeneratedPropertiesEquals(Cloth expected, Cloth actual) {
        assertThat(actual)
            .as("Verify Cloth auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothUpdatableFieldsEquals(Cloth expected, Cloth actual) {
        assertThat(actual)
            .as("Verify Cloth relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getMaterial()).as("check material").isEqualTo(expected.getMaterial()))
            .satisfies(a -> assertThat(a.getColor()).as("check color").isEqualTo(expected.getColor()))
            .satisfies(a -> assertThat(a.getWidth()).as("check width").isEqualTo(expected.getWidth()))
            .satisfies(a -> assertThat(a.getLength()).as("check length").isEqualTo(expected.getLength()))
            .satisfies(a -> assertThat(a.getUnit()).as("check unit").isEqualTo(expected.getUnit()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClothUpdatableRelationshipsEquals(Cloth expected, Cloth actual) {
        // empty method
    }
}
