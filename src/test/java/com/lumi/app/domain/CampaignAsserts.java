package com.lumi.app.domain;

import static com.lumi.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CampaignAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignAllPropertiesEquals(Campaign expected, Campaign actual) {
        assertCampaignAutoGeneratedPropertiesEquals(expected, actual);
        assertCampaignAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignAllUpdatablePropertiesEquals(Campaign expected, Campaign actual) {
        assertCampaignUpdatableFieldsEquals(expected, actual);
        assertCampaignUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignAutoGeneratedPropertiesEquals(Campaign expected, Campaign actual) {
        assertThat(actual)
            .as("Verify Campaign auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignUpdatableFieldsEquals(Campaign expected, Campaign actual) {
        assertThat(actual)
            .as("Verify Campaign relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getChannel()).as("check channel").isEqualTo(expected.getChannel()))
            .satisfies(a ->
                assertThat(a.getBudget()).as("check budget").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBudget())
            )
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignUpdatableRelationshipsEquals(Campaign expected, Campaign actual) {
        // empty method
    }
}
