package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class IntegrationWebhookAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationWebhookAllPropertiesEquals(IntegrationWebhook expected, IntegrationWebhook actual) {
        assertIntegrationWebhookAutoGeneratedPropertiesEquals(expected, actual);
        assertIntegrationWebhookAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationWebhookAllUpdatablePropertiesEquals(IntegrationWebhook expected, IntegrationWebhook actual) {
        assertIntegrationWebhookUpdatableFieldsEquals(expected, actual);
        assertIntegrationWebhookUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationWebhookAutoGeneratedPropertiesEquals(IntegrationWebhook expected, IntegrationWebhook actual) {
        assertThat(actual)
            .as("Verify IntegrationWebhook auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationWebhookUpdatableFieldsEquals(IntegrationWebhook expected, IntegrationWebhook actual) {
        assertThat(actual)
            .as("Verify IntegrationWebhook relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getTargetUrl()).as("check targetUrl").isEqualTo(expected.getTargetUrl()))
            .satisfies(a -> assertThat(a.getSecret()).as("check secret").isEqualTo(expected.getSecret()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getSubscribedEvents()).as("check subscribedEvents").isEqualTo(expected.getSubscribedEvents()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationWebhookUpdatableRelationshipsEquals(IntegrationWebhook expected, IntegrationWebhook actual) {
        // empty method
    }
}
