package com.lumi.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class IntegrationLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationLogAllPropertiesEquals(IntegrationLog expected, IntegrationLog actual) {
        assertIntegrationLogAutoGeneratedPropertiesEquals(expected, actual);
        assertIntegrationLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationLogAllUpdatablePropertiesEquals(IntegrationLog expected, IntegrationLog actual) {
        assertIntegrationLogUpdatableFieldsEquals(expected, actual);
        assertIntegrationLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationLogAutoGeneratedPropertiesEquals(IntegrationLog expected, IntegrationLog actual) {
        assertThat(actual)
            .as("Verify IntegrationLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationLogUpdatableFieldsEquals(IntegrationLog expected, IntegrationLog actual) {
        assertThat(actual)
            .as("Verify IntegrationLog relevant properties")
            .satisfies(a -> assertThat(a.getSourceApp()).as("check sourceApp").isEqualTo(expected.getSourceApp()))
            .satisfies(a -> assertThat(a.getTargetApp()).as("check targetApp").isEqualTo(expected.getTargetApp()))
            .satisfies(a -> assertThat(a.getPayload()).as("check payload").isEqualTo(expected.getPayload()))
            .satisfies(a -> assertThat(a.getResponse()).as("check response").isEqualTo(expected.getResponse()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getRetries()).as("check retries").isEqualTo(expected.getRetries()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegrationLogUpdatableRelationshipsEquals(IntegrationLog expected, IntegrationLog actual) {
        // empty method
    }
}
