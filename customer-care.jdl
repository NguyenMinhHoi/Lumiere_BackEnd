application {
  config {
    baseName lumiApp
    applicationType monolith
    packageName com.lumi.app
    authenticationType jwt
    cacheProvider caffeine
    enableHibernateCache true
    databaseType sql
    devDatabaseType postgresql
    prodDatabaseType postgresql
    buildTool maven
    serviceDiscoveryType no
    testFrameworks [cucumber, gatling]
    clientFramework react
    nativeLanguage en
    languages [en, vi]
    withAdminUi true
  }
  entities *
}

/* ========== ENUMS ========== */
enum TicketStatus { OPEN, IN_PROGRESS, WAITING_CUSTOMER, WAITING_THIRD_PARTY, RESOLVED, CLOSED }
enum Priority { LOW, MEDIUM, HIGH, URGENT }
enum ChannelType { WEB, EMAIL, CHAT, CALL, SOCIAL }
enum Visibility { PUBLIC, INTERNAL }
enum SurveyType { CSAT, NPS }
enum QuestionType { SCALE, SINGLE_CHOICE, MULTI_CHOICE, TEXT }
enum NotificationType { TICKET_UPDATE, SURVEY, SYSTEM }
enum DeliveryChannel { EMAIL, SMS, PUSH, WEBHOOK }
enum SendStatus { PENDING, SENT, FAILED, RETRYING }
enum CustomerTier { BRONZE, SILVER, GOLD, PLATINUM }
enum MessageDirection { INBOUND, OUTBOUND }

/* ========== CORE ENTITIES ========== */
entity Customer {
  code String required unique minlength(3) maxlength(64)
  fullName String required minlength(2) maxlength(128)
  email String required pattern(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)
  phone String pattern(/^[0-9+()\-\s]{6,20}$/)
  tier CustomerTier required
  points Integer required min(0)
  dob Instant
  address String maxlength(255)
  createdAt Instant required
  updatedAt Instant
}
paginate Customer with pagination
dto Customer with mapstruct
service Customer with serviceClass
filter Customer

entity Ticket {
  code String required unique minlength(6) maxlength(32)
  subject String required minlength(3) maxlength(200)
  description TextBlob
  status TicketStatus required
  priority Priority required
  channel ChannelType required
  openedAt Instant required
  firstResponseAt Instant
  resolvedAt Instant
  slaDueAt Instant
}
paginate Ticket with pagination
dto Ticket with mapstruct
service Ticket with serviceClass
filter Ticket

entity TicketComment {
  body TextBlob required
  visibility Visibility required
  createdAt Instant required
}
dto TicketComment with mapstruct
service TicketComment with serviceClass
paginate TicketComment with pagination

entity Attachment {
  name String required maxlength(200)
  url String required maxlength(512)
  contentType String maxlength(128)
  size Long min(0)
  uploadedAt Instant required
}
dto Attachment with mapstruct
service Attachment with serviceClass

entity ChannelMessage {
  direction MessageDirection required
  content TextBlob required
  sentAt Instant required
  externalMessageId String maxlength(128)
}
dto ChannelMessage with mapstruct
service ChannelMessage with serviceClass
paginate ChannelMessage with pagination

entity KnowledgeCategory {
  name String required unique minlength(2) maxlength(128)
  slug String required unique minlength(2) maxlength(128)
}
dto KnowledgeCategory with mapstruct
service KnowledgeCategory with serviceClass

entity KnowledgeArticle {
  title String required minlength(5) maxlength(200)
  content TextBlob required
  published Boolean required
  views Long required min(0)
  updatedAt Instant
}
dto KnowledgeArticle with mapstruct
service KnowledgeArticle with serviceClass
paginate KnowledgeArticle with pagination
filter KnowledgeArticle

entity Tag {
  name String required unique minlength(2) maxlength(64)
}
dto Tag with mapstruct
service Tag with serviceClass

entity SlaPlan {
  name String required unique minlength(2) maxlength(128)
  firstResponseMins Integer required min(1)
  resolutionMins Integer required min(5)
  active Boolean required
}
dto SlaPlan with mapstruct
service SlaPlan with serviceClass

entity Survey {
  surveyType SurveyType required
  title String required minlength(3) maxlength(200)
  sentAt Instant
  dueAt Instant
  isActive Boolean required
}
dto Survey with mapstruct
service Survey with serviceClass
paginate Survey with pagination

entity SurveyQuestion {
  text String required minlength(3) maxlength(300)
  questionType QuestionType required
  scaleMin Integer
  scaleMax Integer
  isNeed Boolean required
  orderNo Integer required min(1)
}
dto SurveyQuestion with mapstruct
service SurveyQuestion with serviceClass

entity SurveyResponse {
  respondedAt Instant required
  score Integer
  comment TextBlob
}
dto SurveyResponse with mapstruct
service SurveyResponse with serviceClass
paginate SurveyResponse with pagination

entity Notification {
  type NotificationType required
  channel DeliveryChannel required
  subject String maxlength(200)
  payload TextBlob required
  sendStatus SendStatus required
  retryCount Integer required min(0)
  lastTriedAt Instant
  createdAt Instant required
}
dto Notification with mapstruct
service Notification with serviceClass
paginate Notification with pagination
filter Notification

entity IntegrationWebhook {
  name String required unique minlength(3) maxlength(128)
  targetUrl String required maxlength(512)
  secret String maxlength(128)
  isActive Boolean required
  subscribedEvents String maxlength(512)
}
dto IntegrationWebhook with mapstruct
service IntegrationWebhook with serviceClass

/* ========== RELATIONSHIPS ========== */
/* ========== RELATIONSHIPS ========== */
relationship ManyToOne {
  Ticket{customer(code)} to Customer
  Ticket{assignee(login)} to User with builtInEntity
  Ticket{slaPlan(name)} to SlaPlan
}

relationship ManyToOne {
  TicketComment{ticket(code)} to Ticket
  TicketComment{author(login)} to User with builtInEntity
}

relationship ManyToOne {
  Attachment{ticket(code)} to Ticket
  Attachment{comment(id)} to TicketComment
}

relationship ManyToOne {
  ChannelMessage{ticket(code)} to Ticket
  ChannelMessage{author(login)} to User with builtInEntity
}

relationship ManyToOne {
  KnowledgeArticle{category(name)} to KnowledgeCategory
}

relationship ManyToMany {
  Ticket{tags(name)} to Tag{tickets}
  KnowledgeArticle{tags(name)} to Tag{articles}
}

relationship ManyToOne {
  Survey{customer(code)} to Customer
  SurveyQuestion{survey(title)} to Survey
  SurveyResponse{survey(title)} to Survey
  SurveyResponse{customer(code)} to Customer
  SurveyResponse{ticket(code)} to Ticket
}

relationship ManyToOne {
  Notification{ticket(code)} to Ticket
  Notification{customer(code)} to Customer
  Notification{survey(title)} to Survey
}

/* ========== END ========== */

/* ===== Extra enums for ticket files ===== */
enum StorageType { LOCAL, S3, GCS, AZURE }
enum FileStatus { ACTIVE, ARCHIVED, DELETED }

/* ===== TicketFile entity (files directly attached to a Ticket) ===== */
entity TicketFile {
  fileName String required maxlength(255)          /* tên file lưu trong hệ thống */
  originalName String maxlength(255)               /* tên gốc khi upload */
  contentType String maxlength(128)                /* MIME type */
  capacity Long required min(0)                        /* bytes */
  storageType StorageType required                 /* nơi lưu trữ */
  path String maxlength(512)                       /* path/key nội bộ (ví dụ S3 key) */
  url String maxlength(1024)                       /* URL public (nếu có) */
  checksum String maxlength(128)                   /* ví dụ SHA-256/MD5 */
  status FileStatus required
  uploadedAt Instant required
}
dto TicketFile with mapstruct
service TicketFile with serviceClass
paginate TicketFile with pagination
filter TicketFile

/* ===== Relationships ===== */
relationship ManyToOne {
  TicketFile{ticket(code)} to Ticket
  TicketFile{uploader(login)} to User with builtInEntity
}

/* ===== E-commerce enums ===== */
enum OrderStatus { DRAFT, PENDING, CONFIRMED, CANCELED, COMPLETED, REFUNDED }
enum PaymentStatus { UNPAID, PAID, PARTIALLY_REFUNDED, REFUNDED }
enum FulfillmentStatus { UNFULFILLED, PARTIALLY_FULFILLED, FULFILLED, RETURNED }
enum ProductStatus { ACTIVE, INACTIVE, ARCHIVED }

/* ===== Product catalog ===== */
entity Product {
  code String required unique minlength(3) maxlength(64)
  name String required minlength(2) maxlength(200)
  slug String unique minlength(2) maxlength(200)
  description TextBlob
  status ProductStatus required
  createdAt Instant required
  updatedAt Instant
}
dto Product with mapstruct
service Product with serviceClass
paginate Product with pagination
filter Product

entity ProductVariant {
  sku String required unique minlength(3) maxlength(64)
  name String required minlength(2) maxlength(200)
  price BigDecimal required min(0)
  compareAtPrice BigDecimal
  currency String maxlength(3)
  stockQuantity Long required min(0)
  weight Double
  length Double
  width Double
  height Double
  isDefault Boolean required
  createdAt Instant required
  updatedAt Instant
}
dto ProductVariant with mapstruct
service ProductVariant with serviceClass
paginate ProductVariant with pagination
filter ProductVariant

/* ===== Order & line items ===== */
entity Orders {
  code String required unique minlength(6) maxlength(32)
  status OrderStatus required
  paymentStatus PaymentStatus required
  fulfillmentStatus FulfillmentStatus required
  totalAmount BigDecimal required min(0)
  currency String maxlength(3)
  note String maxlength(500)
  placedAt Instant
  updatedAt Instant
}
dto Orders with mapstruct
service Orders with serviceClass
paginate Orders with pagination
filter Orders

entity OrderItem {
  quantity Long required min(1)
  unitPrice BigDecimal required min(0)
  totalPrice BigDecimal required min(0)
  nameSnapshot String maxlength(200)     /* tên variant tại thời điểm đặt */
  skuSnapshot String maxlength(64)       /* SKU tại thời điểm đặt */
}
dto OrderItem with mapstruct
service OrderItem with serviceClass
paginate OrderItem with pagination
filter OrderItem

/* ===== Relationships (catalog & order) ===== */
relationship ManyToOne {
  ProductVariant{product(code)} to Product
}

relationship ManyToOne {
  Orders{customer(code)} to Customer
}

relationship ManyToOne {
  OrderItem{order(code)} to Orders
  OrderItem{variant(sku)} to ProductVariant
}

/* Optional: link Ticket -> Order (ticket liên quan đến một đơn hàng) */
relationship ManyToOne {
  Ticket{order(code)} to Orders
}


/* ===== Supplier & supplement ===== */
enum SupplierStatus { ACTIVE, INACTIVE, SUSPENDED }

entity Supplier {
  code String required unique minlength(3) maxlength(64)
  name String required minlength(2) maxlength(200)
  email String pattern(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)
  phone String pattern(/^[0-9+()\-\s]{6,20}$/)
  address String maxlength(255)
  status SupplierStatus required
  createdAt Instant required
  updatedAt Instant
}
dto Supplier with mapstruct
service Supplier with serviceClass
paginate Supplier with pagination
filter Supplier

/* Supplement = quan hệ giữa Product (ví dụ Cloth) và Supplier */
entity Supplement {
  supplyPrice BigDecimal required min(0)        /* giá cung ứng */
  currency String maxlength(3)
  leadTimeDays Integer min(0)                   /* thời gian giao hàng */
  minOrderQty Integer min(1)                    /* số lượng tối thiểu */
  isPreferred Boolean required                  /* nhà cung cấp chính */
  createdAt Instant required
  updatedAt Instant
}
dto Supplement with mapstruct
service Supplement with serviceClass
paginate Supplement with pagination
filter Supplement

/* ===== Audit history ===== */
enum AuditAction { CREATE, UPDATE, DELETE, LOGIN, LOGOUT }

entity AuditHistory {
  entityName String required maxlength(128)       /* tên entity bị tác động */
  entityId String required maxlength(64)          /* ID hoặc code entity */
  action AuditAction required
  oldValue TextBlob                                /* JSON snapshot cũ */
  newValue TextBlob                                /* JSON snapshot mới */
  performedBy String maxlength(64)                 /* user login */
  performedAt Instant required
  ipAddress String maxlength(45)
}
dto AuditHistory with mapstruct
service AuditHistory with serviceClass
paginate AuditHistory with pagination
filter AuditHistory

/* ===== Relationships ===== */
relationship ManyToOne {
  Supplement{product(code)} to Product,
  Supplement{supplier(code)} to Supplier
}


