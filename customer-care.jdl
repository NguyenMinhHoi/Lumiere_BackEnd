application {
  config {
    baseName lumiApp
    applicationType monolith
    packageName com.lumi.app
    authenticationType jwt
    cacheProvider caffeine
    enableHibernateCache true
    databaseType sql
    devDatabaseType postgresql
    prodDatabaseType postgresql
    buildTool maven
    serviceDiscoveryType no
    testFrameworks [cucumber, gatling]
    clientFramework react
    nativeLanguage en
    languages [en, vi]
    withAdminUi true
  }
  entities *
}

/* ========== ENUMS ========== */
enum TicketStatus { OPEN, IN_PROGRESS, WAITING_CUSTOMER, WAITING_THIRD_PARTY, RESOLVED, CLOSED }
enum Priority { LOW, MEDIUM, HIGH, URGENT }
enum ChannelType { WEB, EMAIL, CHAT, CALL, SOCIAL }
enum Visibility { PUBLIC, INTERNAL }
enum SurveyType { CSAT, NPS }
enum QuestionType { SCALE, SINGLE_CHOICE, MULTI_CHOICE, TEXT }
enum NotificationType { TICKET_UPDATE, SURVEY, SYSTEM }
enum DeliveryChannel { EMAIL, SMS, PUSH, WEBHOOK }
enum SendStatus { PENDING, SENT, FAILED, RETRYING }
enum CustomerTier { BRONZE, SILVER, GOLD, PLATINUM }
enum MessageDirection { INBOUND, OUTBOUND }
enum StorageType { LOCAL, S3, GCS, AZURE }
enum FileStatus { ACTIVE, ARCHIVED, DELETED }
enum OrderStatus { DRAFT, PENDING, CONFIRMED, CANCELED, COMPLETED, REFUNDED }
enum PaymentStatus { UNPAID, PAID, PARTIALLY_REFUNDED, REFUNDED }
enum FulfillmentStatus { UNFULFILLED, PARTIALLY_FULFILLED, FULFILLED, RETURNED }
enum ProductStatus { ACTIVE, INACTIVE, ARCHIVED }
enum SupplierStatus { ACTIVE, INACTIVE, SUSPENDED }
enum AuditAction { CREATE, UPDATE, DELETE, LOGIN, LOGOUT }
enum AppType { SHOPEE, TIKTOK, ZALO }

/* ========== CORE ENTITIES ========== */
entity Customer {
  code String required unique minlength(3) maxlength(64)
  fullName String required minlength(2) maxlength(128)
  email String required pattern(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)
  phone String pattern(/^[0-9+()\-\s]{6,20}$/)
  tier CustomerTier required
  points Integer required min(0)
  dob Instant
  address String maxlength(255)
  createdAt Instant required
  updatedAt Instant
}
paginate Customer with pagination
dto Customer with mapstruct
service Customer with serviceClass
filter Customer

entity Ticket {
  customerId Long required
  slaPlanId Long
  orderId Long
  assigneeEmployeeId Long
  code String required unique minlength(6) maxlength(32)
  subject String required minlength(3) maxlength(200)
  description TextBlob
  status TicketStatus required
  priority Priority required
  channel ChannelType required
  openedAt Instant required
  firstResponseAt Instant
  resolvedAt Instant
  slaDueAt Instant
}
paginate Ticket with pagination
dto Ticket with mapstruct
service Ticket with serviceClass
filter Ticket

entity TicketComment {
  ticketId Long required
  authorId Long required
  body TextBlob required
  visibility Visibility required
  createdAt Instant required
}
dto TicketComment with mapstruct
service TicketComment with serviceClass
paginate TicketComment with pagination

entity Attachment {
  ticketId Long
  commentId Long
  name String required maxlength(200)
  url String required maxlength(512)
  contentType String maxlength(128)
  size Long min(0)
  uploadedAt Instant required
}
dto Attachment with mapstruct
service Attachment with serviceClass

entity ChannelMessage {
  ticketId Long required
  authorId Long
  direction MessageDirection required
  content TextBlob required
  sentAt Instant required
  externalMessageId String maxlength(128)
}
dto ChannelMessage with mapstruct
service ChannelMessage with serviceClass
paginate ChannelMessage with pagination

entity KnowledgeCategory {
  name String required unique minlength(2) maxlength(128)
  slug String required unique minlength(2) maxlength(128)
}
dto KnowledgeCategory with mapstruct
service KnowledgeCategory with serviceClass

entity KnowledgeArticle {
  categoryId Long
  title String required minlength(5) maxlength(200)
  content TextBlob required
  published Boolean required
  views Long required min(0)
  updatedAt Instant
}
dto KnowledgeArticle with mapstruct
service KnowledgeArticle with serviceClass
paginate KnowledgeArticle with pagination
filter KnowledgeArticle

entity Tag {
  name String required unique minlength(2) maxlength(64)
}
dto Tag with mapstruct
service Tag with serviceClass

entity TicketTag {
  ticketId Long required
  tagId Long required
}

entity ArticleTag {
  articleId Long required
  tagId Long required
}

entity SlaPlan {
  name String required unique minlength(2) maxlength(128)
  firstResponseMins Integer required min(1)
  resolutionMins Integer required min(5)
  active Boolean required
}
dto SlaPlan with mapstruct
service SlaPlan with serviceClass

entity Survey {
  customerId Long
  surveyType SurveyType required
  title String required minlength(3) maxlength(200)
  sentAt Instant
  dueAt Instant
  isActive Boolean required
}
dto Survey with mapstruct
service Survey with serviceClass
paginate Survey with pagination

entity SurveyQuestion {
  surveyId Long required
  text String required minlength(3) maxlength(300)
  questionType QuestionType required
  scaleMin Integer
  scaleMax Integer
  isNeed Boolean required
  orderNo Integer required min(1)
}
dto SurveyQuestion with mapstruct
service SurveyQuestion with serviceClass

entity SurveyResponse {
  surveyId Long required
  customerId Long
  ticketId Long
  respondedAt Instant required
  score Integer
  comment TextBlob
}
dto SurveyResponse with mapstruct
service SurveyResponse with serviceClass
paginate SurveyResponse with pagination

entity Notification {
  ticketId Long
  customerId Long
  surveyId Long
  type NotificationType required
  channel DeliveryChannel required
  subject String maxlength(200)
  payload TextBlob required
  sendStatus SendStatus required
  retryCount Integer required min(0)
  lastTriedAt Instant
  createdAt Instant required
}
dto Notification with mapstruct
service Notification with serviceClass
paginate Notification with pagination
filter Notification

entity IntegrationWebhook {
  name String required unique minlength(3) maxlength(128)
  targetUrl String required maxlength(512)
  secret String maxlength(128)
  isActive Boolean required
  subscribedEvents String maxlength(512)
}
dto IntegrationWebhook with mapstruct
service IntegrationWebhook with serviceClass

entity TicketFile {
  ticketId Long required
  uploaderId Long
  fileName String required maxlength(255)
  originalName String maxlength(255)
  contentType String maxlength(128)
  capacity Long required min(0)
  storageType StorageType required
  path String maxlength(512)
  url String maxlength(1024)
  checksum String maxlength(128)
  status FileStatus required
  uploadedAt Instant required
}
dto TicketFile with mapstruct
paginate TicketFile with pagination
filter TicketFile

entity Product {
  code String required unique minlength(3) maxlength(64)
  name String required minlength(2) maxlength(200)
  slug String unique minlength(2) maxlength(200)
  description TextBlob
  status ProductStatus required
  createdAt Instant required
  updatedAt Instant
}
dto Product with mapstruct
paginate Product with pagination
filter Product

entity ProductVariant {
  productId Long required
  sku String required unique minlength(3) maxlength(64)
  name String required minlength(2) maxlength(200)
  price BigDecimal required min(0)
  compareAtPrice BigDecimal
  currency String maxlength(3)
  stockQuantity Long required min(0)
  weight Double
  length Double
  width Double
  height Double
  isDefault Boolean required
  createdAt Instant required
  updatedAt Instant
}
dto ProductVariant with mapstruct
paginate ProductVariant with pagination
filter ProductVariant

entity Orders {
  customerId Long
  code String required unique minlength(6) maxlength(32)
  status OrderStatus required
  paymentStatus PaymentStatus required
  fulfillmentStatus FulfillmentStatus required
  totalAmount BigDecimal required min(0)
  currency String maxlength(3)
  note String maxlength(500)
  placedAt Instant
  updatedAt Instant
}
dto Orders with mapstruct
paginate Orders with pagination
filter Orders

entity OrderItem {
  orderId Long required
  variantId Long required
  quantity Long required min(1)
  unitPrice BigDecimal required min(0)
  totalPrice BigDecimal required min(0)
  nameSnapshot String maxlength(200)
  skuSnapshot String maxlength(64)
}
dto OrderItem with mapstruct
paginate OrderItem with pagination
filter OrderItem

entity Supplier {
  code String required unique minlength(3) maxlength(64)
  name String required minlength(2) maxlength(200)
  email String pattern(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)
  phone String pattern(/^[0-9+()\-\s]{6,20}$/)
  address String maxlength(255)
  status SupplierStatus required
  createdAt Instant required
  updatedAt Instant
}
dto Supplier with mapstruct
paginate Supplier with pagination
filter Supplier

entity Supplement {
  productId Long required
  supplierId Long required
  supplyPrice BigDecimal required min(0)
  currency String maxlength(3)
  leadTimeDays Integer min(0)
  minOrderQty Integer min(1)
  isPreferred Boolean required
  createdAt Instant required
  updatedAt Instant
}
dto Supplement with mapstruct
paginate Supplement with pagination
filter Supplement

entity AuditHistory {
  entityName String required maxlength(128)
  entityId String required maxlength(64)
  action AuditAction required
  oldValue TextBlob
  newValue TextBlob
  performedBy String maxlength(64)
  performedAt Instant required
  ipAddress String maxlength(45)
}
dto AuditHistory with mapstruct
paginate AuditHistory with pagination
filter AuditHistory

/* ===== Integration tables ===== */
entity AppConfig {
  appCode AppType required
  configKey String required
  configValue String
  createdAt Instant
  updatedAt Instant
}
dto AppConfig with mapstruct

entity CompanyConfig {
  companyId Long required
  appId Long required
  isActive Boolean
  createdAt Instant
  updatedAt Instant
}
dto CompanyConfig with mapstruct

entity CompanyConfigAdditional {
  companyConfigId Long required
  configKey String required
  configValue String
  createdAt Instant
  updatedAt Instant
}
dto CompanyConfigAdditional with mapstruct


entity AppConfig {
  appCode String required,         // Shopee, TikTok, Zalo
  configKey String required,
  configValue String,
  createdAt Instant,
  updatedAt Instant
}

entity CompanyConfig {
  companyId Long required,         // chỉ lưu id của company
  appId Long required,             // id tham chiếu sang AppConfig
  isActive Boolean,
  createdAt Instant,
  updatedAt Instant
}

entity CompanyConfigAdditional {
  companyConfigId Long required,   // id tham chiếu sang CompanyConfig
  configKey String required,
  configValue String,
  createdAt Instant,
  updatedAt Instant
}

/* ===== VOUCHER SYSTEM ===== */
enum VoucherType { PERCENT, FIXED }
enum VoucherStatus { ACTIVE, EXPIRED, DISABLED }

entity Voucher {
  code String required unique minlength(3) maxlength(64)
  discountType VoucherType required
  discountValue BigDecimal required min(0)
  minOrderValue BigDecimal
  maxDiscountValue BigDecimal
  usageLimit Integer
  usedCount Integer required min(0)
  validFrom Instant required
  validTo Instant required
  status VoucherStatus required
  createdAt Instant required
  updatedAt Instant
}
dto Voucher with mapstruct
paginate Voucher with pagination
filter Voucher

entity VoucherRedemption {
  voucherId Long required
  orderId Long required
  customerId Long required
  redeemedAt Instant required
}
dto VoucherRedemption with mapstruct
paginate VoucherRedemption with pagination

/* ===== CART SYSTEM ===== */
entity Cart {
  customerId Long required
  createdAt Instant required
  updatedAt Instant
}
dto Cart with mapstruct
paginate Cart with pagination

entity CartItem {
  cartId Long required
  productVariantId Long required
  quantity Integer required min(1)
  addedAt Instant required
}
dto CartItem with mapstruct
paginate CartItem with pagination

/* ===== INVENTORY SYSTEM ===== */
enum StockMovementReason { PURCHASE, SALE, RETURN, ADJUSTMENT, TRANSFER }

entity Warehouse {
  code String required unique minlength(3) maxlength(64)
  name String required minlength(2) maxlength(128)
  address String maxlength(255)
  createdAt Instant required
  updatedAt Instant
}
dto Warehouse with mapstruct
paginate Warehouse with pagination

entity Inventory {
  productVariantId Long required
  warehouseId Long required
  quantity Long required min(0)
  updatedAt Instant required
}
dto Inventory with mapstruct
paginate Inventory with pagination

entity StockMovement {
  productVariantId Long required
  warehouseId Long required
  delta Long required
  reason StockMovementReason required
  refOrderId Long
  createdAt Instant required
}
dto StockMovement with mapstruct
paginate StockMovement with pagination

/* ===== MARKETING / CAMPAIGN ===== */
entity Campaign {
  name String required minlength(3) maxlength(128)
  description TextBlob
  channel DeliveryChannel required
  budget BigDecimal min(0)
  startDate Instant required
  endDate Instant required
  isActive Boolean required
  createdAt Instant required
  updatedAt Instant
}
dto Campaign with mapstruct
paginate Campaign with pagination

/* ===== INTEGRATION LOG ===== */
enum IntegrationStatus { PENDING, SUCCESS, FAILED, RETRYING }

entity IntegrationLog {
  sourceApp AppType required
  targetApp AppType required
  payload TextBlob required
  response TextBlob
  status IntegrationStatus required
  retries Integer required min(0)
  createdAt Instant required
  updatedAt Instant
}
dto IntegrationLog with mapstruct
paginate IntegrationLog with pagination
filter IntegrationLog

enum EmployeeRole { AGENT, SUPERVISOR, ADMIN, SALES, SUPPORT }
enum EmployeeStatus { ACTIVE, INACTIVE, SUSPENDED }

entity Employee {
  code String required unique minlength(3) maxlength(64)   // Mã nhân viên
  fullName String required minlength(2) maxlength(128)
  email String required pattern(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)
  phone String pattern(/^[0-9+()\-\s]{6,20}$/)
  role EmployeeRole required
  status EmployeeStatus required
  department String maxlength(128)
  joinedAt Instant
  createdAt Instant required
  updatedAt Instant
}
dto Employee with mapstruct
paginate Employee with pagination
filter Employee

service Ticket with serviceImpl
service TicketComment with serviceImpl
service Attachment with serviceImpl
service ChannelMessage with serviceImpl
service KnowledgeCategory with serviceImpl
service KnowledgeArticle with serviceImpl
service Tag with serviceImpl
service SlaPlan with serviceImpl
service Survey with serviceImpl
service SurveyQuestion with serviceImpl
service SurveyResponse with serviceImpl
service Notification with serviceImpl
service IntegrationWebhook with serviceImpl
service TicketFile with serviceImpl
service Product with serviceImpl
service ProductVariant with serviceImpl
service Orders with serviceImpl
service OrderItem with serviceImpl
service Supplier with serviceImpl
service Supplement with serviceImpl
service AuditHistory with serviceImpl
service AppConfig with serviceImpl
service CompanyConfig with serviceImpl
service CompanyConfigAdditional with serviceImpl
service Voucher with serviceImpl
service VoucherRedemption with serviceImpl
service Cart with serviceImpl
service CartItem with serviceImpl
service Warehouse with serviceImpl
service Inventory with serviceImpl
service StockMovement with serviceImpl
service Campaign with serviceImpl
service IntegrationLog with serviceImpl
service Employee with serviceImpl
service Customer with serviceImpl
